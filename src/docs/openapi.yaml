openapi: 3.0.3
info:
  title: Biz API - OpenAPI 3.0
  description: |-
    Biz Api Restful with Express and Typescript + Swagger

    Some useful links:
    - [The Biz API repository](https://github.com/fjuribe14/biz-api)
  version: 1.0.1
servers:
  - url: http://localhost:3000
tags:
  - name: Auth
    description: Operations about authentication
  - name: Products
    description: Operations about product
  - name: Orders
    description: Operations about order
paths:
  /api/auth/login:
    post:
      tags:
        - Auth
      summary: Iniciar sesioÃÅn
      description: ""
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"

      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
        400:
          description: "Error on validation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/auth/register:
    post:
      tags:
        - Auth
      summary: Registrar un nuevo usuario
      description: ""
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterRequest"

      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RegisterResponse"
        400:
          description: "Error on validation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/products:
    get:
      tags:
        - Products
      summary: Get all products
      description: ""
      security:
        - bearerAuth: []
      parameters:
        - name: limit
          in: query
          description: Limit
          required: false
          schema:
            type: integer
            format: int32
        - name: page
          in: query
          description: Page
          required: false
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    post:
      tags:
        - Products
      summary: Create a new product
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "Product created successfully"
        400:
          description: "Error on validation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/products/{id}:
    get:
      tags:
        - Products
      summary: Get a product by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Product ID
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        404:
          description: Product not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    put:
      tags:
        - Products
      summary: Update a product
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Product ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "Product updated successfully"
        400:
          description: "Error on validation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        404:
          description: Product not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      tags:
        - Products
      summary: Delete a product
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Product ID
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "Product deleted successfully"
        404:
          description: Product not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/orders:
    get:
      tags:
        - Orders
      summary: Get all orders
      security:
        - bearerAuth: []
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetResponse"
        500:
          description: "Server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    post:
      tags:
        - Orders
      summary: Create a new order
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                schema:
                  $ref: "#/components/schemas/Order"
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetResponse"
        400:
          description: "Error on validation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/orders/{id}:
    get:
      tags:
        - Orders
      summary: Get an order by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Order ID
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        404:
          description: "Order not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: "Server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    put:
      tags:
        - Orders
      summary: Update an order
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Order ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Order"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "Order updated successfully"

        400:
          description: "Error on validation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        404:
          description: "Order not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Bearer token
  schemas:
    Product:
      type: object
      required:
        - id
        - title
        - price
      properties:
        id:
          type: string
        name:
          type: string
        image:
          type: string
        category:
          enum:
            - "ELECTRONICS"
            - "CLOTHES"
            - "FOOD"
            - "BOOKS"
            - "TOYS"
            - "GAMES"
            - "HEALTH"
            - "BEAUTY"
            - "HOME"
        status:
          type: boolean
        description:
          type: string
        price:
          type: number
        stock:
          type: number
        createdAt:
          type: string
        updatedAt:
          type: string
      example:
        id: "iluehfef25454rg"
        title: "Fjallraven - Foldsack No. 1 Backpack, Fits 15 Laptops"
        price: 109.95
        description: "Your perfect pack for everyday use and walks in the forest. Stash your laptop (up to 15 inches) and your everyday"
        category: "ELECTRONICS"
        image: "https://fakestoreapi.com/img/81fPKd-2AYL._AC_SL1500_.jpg"
        stock: 94
        status: true

    Order:
      type: object
      properties:
        id:
          type: string
        quantity:
          type: number
        totalPrice:
          type: number
        status:
          type: string
          enum:
            - "PENDING"
            - "COMPLETED"
            - "CANCELLED"
        address:
          type: string
        comment:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
      example:
        id: "iluehfef25454rg"
        quantity: 1
        totalPrice: 109.95
        status: "PENDING"
        address: "123 Main St, Anytown, USA"
        comment: "This is a test order"

    GetResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Product"
        pagination:
          type: object
          $ref: "#/components/schemas/Pagination"
    Pagination:
      type: object
      properties:
        total:
          type: integer
          format: int32
        pages:
          type: integer
          format: int32
        page:
          type: integer
          format: int32
        limit:
          type: integer
          format: int32
        offset:
          type: integer
          format: int32
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
        password:
          type: string
      example:
        email: 3bM6o@example.com
        password: password123
    LoginResponse:
      type: object
      required:
        - token
      properties:
        token:
          type: string
      example:
        token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
    RegisterRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
        password:
          type: string
      example:
        email: 3bM6o@example.com
        password: password123
    RegisterResponse:
      type: object
      properties:
        message:
          type: string
      example:
        message: "User created successfully"
    ErrorResponse:
      type: object
      required:
        - error
      properties:
        error:
          type: string
      example:
        error: "Error message"
    # Order:
    #   type: object
    #   properties:
    #     id:
    #       type: integer
    #       format: int64
    #       example: 10
    #     petId:
    #       type: integer
    #       format: int64
    #       example: 198772
    #     quantity:
    #       type: integer
    #       format: int32
    #       example: 7
    #     shipDate:
    #       type: string
    #       format: date-time
    #     status:
    #       type: string
    #       description: Order Status
    #       example: approved
    #       enum:
    #         - placed
    #         - approved
    #         - delivered
    #     complete:
    #       type: boolean
    #   xml:
    #     name: order
    # Customer:
    #   type: object
    #   properties:
    #     id:
    #       type: integer
    #       format: int64
    #       example: 100000
    #     username:
    #       type: string
    #       example: fehguy
    #     address:
    #       type: array
    #       xml:
    #         name: addresses
    #         wrapped: true
    #       items:
    #         $ref: "#/components/schemas/Address"
    #   xml:
    #     name: customer
    # Address:
    #   type: object
    #   properties:
    #     street:
    #       type: string
    #       example: 437 Lytton
    #     city:
    #       type: string
    #       example: Palo Alto
    #     state:
    #       type: string
    #       example: CA
    #     zip:
    #       type: string
    #       example: "94301"
    #   xml:
    #     name: address
    # Category:
    #   type: object
    #   properties:
    #     id:
    #       type: integer
    #       format: int64
    #       example: 1
    #     name:
    #       type: string
    #       example: Dogs
    #   xml:
    #     name: category
    # User:
    #   type: object
    #   properties:
    #     id:
    #       type: integer
    #       format: int64
    #       example: 10
    #     username:
    #       type: string
    #       example: theUser
    #     firstName:
    #       type: string
    #       example: John
    #     lastName:
    #       type: string
    #       example: James
    #     email:
    #       type: string
    #       example: john@email.com
    #     password:
    #       type: string
    #       example: "12345"
    #     phone:
    #       type: string
    #       example: "12345"
    #     userStatus:
    #       type: integer
    #       description: User Status
    #       format: int32
    #       example: 1
    #   xml:
    #     name: user
    # Tag:
    #   type: object
    #   properties:
    #     id:
    #       type: integer
    #       format: int64
    #     name:
    #       type: string
    #   xml:
    #     name: tag
    # Pet:
    #   required:
    #     - name
    #     - photoUrls
    #   type: object
    #   properties:
    #     id:
    #       type: integer
    #       format: int64
    #       example: 10
    #     name:
    #       type: string
    #       example: doggie
    #     category:
    #       $ref: "#/components/schemas/Category"
    #     photoUrls:
    #       type: array
    #       xml:
    #         wrapped: true
    #       items:
    #         type: string
    #         xml:
    #           name: photoUrl
    #     tags:
    #       type: array
    #       xml:
    #         wrapped: true
    #       items:
    #         $ref: "#/components/schemas/Tag"
    #     status:
    #       type: string
    #       description: pet status in the store
    #       enum:
    #         - available
    #         - pending
    #         - sold
    #   xml:
    #     name: pet
    # ApiResponse:
    #   type: object
    #   properties:
    #     code:
    #       type: integer
    #       format: int32
    #     type:
    #       type: string
    #     message:
    #       type: string
    #   xml:
    #     name: "##default"
  # requestBodies:
  #   Pet:
  #     description: Pet object that needs to be added to the store
  #     content:
  #       application/json:
  #         schema:
  #           $ref: "#/components/schemas/Pet"
  #       application/xml:
  #         schema:
  #           $ref: "#/components/schemas/Pet"
  #   UserArray:
  #     description: List of user object
  #     content:
  #       application/json:
  #         schema:
  #           type: array
  #           items:
  #             $ref: "#/components/schemas/User"
