openapi: 3.0.3
info:
  title: Biz API - OpenAPI 3.0
  description: |-
    Biz Api Restful with Express and Typescript + Swagger

    Some useful links:
    - [The Biz API repository](https://github.com/fjuribe14/biz-api)
  version: 1.0.1
servers:
  - url: http://localhost:3000
tags:
  - name: Auth
    description: Operations about authentication
  - name: Products
    description: Operations about product
  - name: Inventory
    description: Operations about inventory
  - name: Orders
    description: Operations about order
paths:
  /api/auth/login:
    post:
      tags:
        - Auth
      summary: Iniciar sesioÃÅn
      description: ""
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"

      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
        400:
          description: "Error on validation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/auth/register:
    post:
      tags:
        - Auth
      summary: Registrar un nuevo usuario
      description: ""
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterRequest"

      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RegisterResponse"
        400:
          description: "Error on validation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/products:
    get:
      tags:
        - Products
      summary: Get all products
      description: ""
      security:
        - bearerAuth: []
      parameters:
        - name: limit
          in: query
          description: Limit
          required: false
          schema:
            type: integer
            format: int32
        - name: page
          in: query
          description: Page
          required: false
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Product"
                  pagination:
                    $ref: "#/components/schemas/Pagination"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    post:
      tags:
        - Products
      summary: Create a new product
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "Product created successfully"
        400:
          description: "Error on validation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/products/{id}:
    get:
      tags:
        - Products
      summary: Get a product by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Product ID
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        404:
          description: Product not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    put:
      tags:
        - Products
      summary: Update a product
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Product ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "Product updated successfully"
        400:
          description: "Error on validation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        404:
          description: Product not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      tags:
        - Products
      summary: Delete a product
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Product ID
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "Product deleted successfully"
        404:
          description: Product not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/orders:
    get:
      tags:
        - Orders
      summary: Get all orders
      security:
        - bearerAuth: []
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Order"
                  pagination:
                    $ref: "#/components/schemas/Pagination"
        500:
          description: "Server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    post:
      tags:
        - Orders
      summary: Create a new order
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                schema:
                  $ref: "#/components/schemas/Order"
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetResponse"
        400:
          description: "Error on validation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/orders/{id}:
    get:
      tags:
        - Orders
      summary: Get an order by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Order ID
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        404:
          description: "Order not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        500:
          description: "Server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    put:
      tags:
        - Orders
      summary: Update an order
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Order ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Order"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "Order updated successfully"

        400:
          description: "Error on validation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        404:
          description: "Order not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/inventory:
    get:
      tags:
        - Inventory
      summary: Get all inventory
      parameters: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Inventory"
                  pagination:
                    $ref: "#/components/schemas/Pagination"

    post:
      tags:
        - Inventory
      summary: Create a new inventory
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Inventory"
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "Inventory created successfully"
        "400":
          description: "Error on validation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/inventory/{id}:
    get:
      tags:
        - Inventory
      summary: Get inventory by ID
      parameters: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Inventory"
        "404":
          description: "Inventory not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Bearer token
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          description: ID √∫nico del usuario.
        email:
          type: string
          description: Correo electr√≥nico del usuario.
        password:
          type: string
          description: Contrase√±a del usuario.
        image:
          type: string
          description: URL de la imagen del usuario.
        emailVerified:
          type: string
          format: date-time
          description: Fecha de verificaci√≥n del correo electr√≥nico.
        active:
          type: boolean
          description: Indica si el usuario est√° activo.
        role:
          type: string
          enum: [USER, ADMIN]
          description: Rol del usuario.
        refreshToken:
          type: string
          description: Token de refresco para autenticaci√≥n.
        createdAt:
          type: string
          format: date-time
          description: Fecha de creaci√≥n del usuario.
        updatedAt:
          type: string
          format: date-time
          description: Fecha de √∫ltima actualizaci√≥n del usuario.
        deletedAt:
          type: string
          format: date-time
          description: Fecha de eliminaci√≥n del usuario.
      required:
        - id
        - email
        - password
        - createdAt

    Product:
      type: object
      properties:
        id:
          type: string
          description: ID √∫nico del producto.
        name:
          type: string
          description: Nombre del producto.
        image:
          type: string
          description: URL de la imagen del producto.
        category:
          type: string
          enum: [ELECTRONICS, CLOTHES, FOOD, BOOKS, TOYS, GAMES, HEALTH, BEAUTY, HOME]
          description: Categor√≠a del producto.
        status:
          type: boolean
          description: Estado del producto (activo/inactivo).
        description:
          type: string
          description: Descripci√≥n del producto.
        price:
          type: number
          format: float
          description: Precio del producto.
        createdAt:
          type: string
          format: date-time
          description: Fecha de creaci√≥n del producto.
        updatedAt:
          type: string
          format: date-time
          description: Fecha de √∫ltima actualizaci√≥n del producto.
      required:
        - id
        - name
        - image
        - category
        - description
        - price
        - createdAt

    Inventory:
      type: object
      properties:
        id:
          type: string
          description: ID √∫nico del inventario.
        quantity:
          type: integer
          description: Cantidad disponible del producto.
        productId:
          type: string
          description: ID del producto asociado.
      required:
        - id
        - quantity
        - productId

    Order:
      type: object
      properties:
        id:
          type: string
          description: ID √∫nico de la orden.
        date:
          type: string
          format: date-time
          description: Fecha de la orden.
        totalPrice:
          type: number
          format: float
          description: Precio total de la orden.
        status:
          type: string
          enum: [PENDING, IN_PROGRESS, SHIPPED, DELIVERED, CANCELLED]
          description: Estado de la orden.
        address:
          type: string
          description: Direcci√≥n de entrega.
        comment:
          type: string
          description: Comentario adicional de la orden.
        createdAt:
          type: string
          format: date-time
          description: Fecha de creaci√≥n de la orden.
        updatedAt:
          type: string
          format: date-time
          description: Fecha de √∫ltima actualizaci√≥n de la orden.
        userId:
          type: string
          description: ID del usuario asociado a la orden.
      required:
        - id
        - date
        - totalPrice
        - status
        - address
        - createdAt

    OrdenItem:
      type: object
      properties:
        id:
          type: string
          description: ID √∫nico del √≠tem de la orden.
        quantity:
          type: integer
          description: Cantidad del producto en la orden.
        productId:
          type: string
          description: ID del producto asociado.
        orderId:
          type: string
          description: ID de la orden asociada.
      required:
        - id
        - quantity
        - productId
        - orderId

    GetResponse:
      type: object
      properties:
        data:
          type: array
          items:
            properties:
              id:
                type: string
        pagination:
          type: object
          $ref: "#/components/schemas/Pagination"

    Pagination:
      type: object
      properties:
        total:
          type: integer
          format: int32
        pages:
          type: integer
          format: int32
        page:
          type: integer
          format: int32
        limit:
          type: integer
          format: int32
        offset:
          type: integer
          format: int32

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
        password:
          type: string
      example:
        email: 3bM6o@example.com
        password: password123

    LoginResponse:
      type: object
      required:
        - token
      properties:
        token:
          type: string
      example:
        token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c

    RegisterRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
        password:
          type: string
      example:
        email: 3bM6o@example.com
        password: password123

    RegisterResponse:
      type: object
      properties:
        message:
          type: string
      example:
        message: "User created successfully"

    ErrorResponse:
      type: object
      required:
        - error
      properties:
        error:
          type: string
      example:
        error: "Error message"
